dim(res)
head(res[, , 1])
head(res[, , 2])
head(res[, , 3])
head(res[, , 4])
?ttest.tstat
logBFapproxLin <- function(tval, N, rscale){
# Find a good BF value approximation function for the t-value range
trange <- range(tval)
tfit <- seq(trange[1], trange[2], length.out = 50)
BFs <- apply(cbind(tfit), 1, function(x) unname(ttest.tstat(x, n1=N, rscale=rscale, simple=T)))
# Apply approximation
fit <- fitfun(tfit, n=N, BFs=BFs)
fit$coefficients[1] + fit$coefficients[2]*tval^2
}
res <- array(NA, dim=c(5000, (length(Ns)*length(deltas)), 5))
logBFapproxLin <- function(tval, N, rscale){
# Find a good BF value approximation function for the t-value range
trange <- range(tval)
tfit <- seq(trange[1], trange[2], length.out = 50)
BFs <- apply(cbind(tfit), 1, function(x) unname(ttest.tstat(x, n1=N, rscale=rscale, simple=T)))
# Apply approximation
fit <- fitfun(tfit, n=N, BFs=BFs)
fit$coefficients[1] + fit$coefficients[2]*tval^2
}
for(i in 1:(length(Ns)*length(deltas))){
res[, i, 1] <- log(apply(cbind(tvals[,i]), 1, function(x) unname(ttest.tstat(x, n1 = conds[i,1], rscale = "medium", simple=T))))
res[, i, 2] <- log(apply(cbind(tvals[,i]), 1, function(x) unname(ttest.tstat(x, n1 = conds[i,1], rscale = "wide", simple=T))))
res[, i, 3] <- log(BFapproxJef(tvals[,i], n = conds[i,1]))
res[, i, 4] <- logBFapproxLin(tvals[,i], N = conds[i, 1], rscale="medium")
res[, i, 5] <- logBFapproxLin(tvals[,i], N = conds[i, 1], rscale="wide")
}
summmary(rnorm(100))
summary(rnorm(100))
summaries <- array(20, 5, 6)
summaries <- array(dim=c(20, 5, 6))
for(i in 1:(length(Ns)*length(deltas))){
for(j in 1:5){
summaries[i, j, ] <- summary(res[, i, j])
}
}
head(summaries[1, , ])
summaries[1, , ]
conds
par(mfrow=c(4,5))
boxplot(summary(rnorm100))
boxplot(summary(rnorm(100)))
boxplot(summary(rnorm(100)))
boxplot(summary(rnorm(100)))
bla <- rnorm(100)
boxplot(bla)
boxplot(summary(bla))
?boxplot
dim(res)
?collapse
?merge
?boxplot
boxplot(rnorm(20), plot=FALSE)
summaries <- array(dim=c(20, 5, 5))
for(i in 1:(length(Ns)*length(deltas))){
for(j in 1:5){
summaries[i, j, ] <- boxplot(res[, i, j], plot=FALSE)$stats
}
}
summaries
melt(summaries)
dimnames(summaries)
allconds <- expand.grid(conds, c("BF1", "BF2", "BFapproxJef", "BFapproxLin1", "BFapproxLin2"))
allconds
allconds <- expand.grid(Ns, deltas, c("BF1", "BF2", "BFapproxJef", "BFapproxLin1", "BFapproxLin2"))
allconds
?bxp
summaries <- list()
summaries <- list()
for(i in 1:(length(Ns)*length(deltas))){
for(j in 1:5){
summaries[5*(i-1)+j] <- boxplot(res[, i, j], plot=FALSE)
}
}
summaries <- list()
for(i in 1:(length(Ns)*length(deltas))){
for(j in 1:5){
summaries[[5*(i-1)+j]] <- boxplot(res[, i, j], plot=FALSE)
}
}
length(summaries)
bxp(summaries[[1:5]])
bxp(summaries[1:5])
summaries[1:2]
boxplot (weight ~ group, data = PlantGrowth, subset = group == "ctrl")
boxplot (weight ~ group, data = PlantGrowth)
bla <- boxplot (weight ~ group, data = PlantGrowth, plot=FALSE)
bla
summaries[1]
is.matrix(summaries[1]$stats)
summaries[1]$stats
summaries[[1]]$stats
is.matrix(summaries[[1]]$stats)
bla
summaries[[1]]$out
summaries[[]]$out
summaries[[2]]$out
bxpdat <- list()
bxpdat <- list()
bxpdat<- matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF")))
bxpdat
bxpdat <- list()
bxpdat<- matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF")))
bxpdat$method
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
}
length(res[, 1, 1])
bxpdat <- list()
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
}
bxpdat
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]])
}
par(mfrow=c(4,5))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]])
}
par(mfrow=c(5,4))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]])
}
par(mfrow=c(1,4))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]])
}
par(mfrow=c(1,4))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]])
}
cond
conds
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], title=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]))
}
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], main=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]))
}
par(mfrow=c(1,4))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], main=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]))
}
bxpdat <- list()
par(mfrow=c(1,4))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], main=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]))
}
bxpdat <- list()
par(mfrow=c(1,4))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], main=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]))
}
bxpdat <- list()
par(mfrow=c(1,4), mar=c(5, 3, 4, 1))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], main=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]))
}
bxpdat <- list()
par(mfrow=c(1,4), mar=c(5, 3, 4, 1))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], main=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]), col=c("seagreen", "seagreen1", "gray", "seagreen", "seagreen2"))
}
par(mfrow=c(3,1))
hist(res$logBF)
# Approximate BF10 is 1/K
BFapprox <- function(tval, n){
1/(sqrt(n)*exp(-0.5*tval^2))
}
# Compare to BayesFactor
library(BayesFactor)
ttest.tstat(t = 1.5, n1 = 50, simple=T)
BFapprox(tval=1.5, n = 50)
tval <- seq(-5, 5, length.out=1001)
Ns <- seq(10, 500, by=10)
cond <- expand.grid(tval, Ns)
cond$BFapprox <- apply(cond[, 1:2], 1, FUN = function(x) BFapprox(t=x[1], n=x[2]))
cond$BFttest <- apply(cond[, 1:2], 1, FUN = function(x) unname(ttest.tstat(t=x[1], n1=x[2], simple=T)))
colnames(cond)[1:2] <- c("tval", "N")
library(dplyr)
library(ggplot2)
cond %>% filter(N %in% c(10, 50, 100, 500)) %>%
ggplot(aes(tval, log(BFapprox))) +
geom_line() +
facet_wrap(~ N) +
geom_line(aes(tval, log(BFttest)), color = "steelblue") +
labs(y = "log BF", x = "t-value")
# Approximate BF10 is 1/K
BFapprox <- function(tval, n){
1/(sqrt(n)*exp(-0.5*tval^2))
}
# Compare to BayesFactor
library(BayesFactor)
ttest.tstat(t = 1.5, n1 = 50, simple=T)
BFapprox(tval=1.5, n = 50)
tval <- seq(-5, 5, length.out=1001)
Ns <- seq(10, 500, by=10)
cond <- expand.grid(tval, Ns)
cond$BFapprox <- apply(cond[, 1:2], 1, FUN = function(x) BFapprox(t=x[1], n=x[2]))
cond$BFttest <- apply(cond[, 1:2], 1, FUN = function(x) unname(ttest.tstat(t=x[1], n1=x[2], simple=T)))
colnames(cond)[1:2] <- c("tval", "N")
library(dplyr)
library(ggplot2)
cond %>% filter(N %in% c(10, 50, 100, 500)) %>%
ggplot(aes(tval, log(BFapprox))) +
geom_line() +
facet_wrap(~ N) +
geom_line(aes(tval, log(BFttest)), color = "steelblue") +
labs(y = "log BF", x = "t-value")
cond %>% filter(tval %in% c(-5:5)) %>%
ggplot(aes(N, log(BFapprox))) +
geom_line() +
facet_wrap(~ tval) +
geom_line(aes(N, log(BFttest)), color="steelblue") +
labs(y = "log BF", x = "Sample size")
cond$BFwide <- apply(cond[, 1:2], 1, FUN = function(x) unname(ttest.tstat(t=x[1], n1=x[2], simple=T, rscale = "wide")))
delta <- 0.5
N <- 50
BFapproxJef <- function(tval, n){
1/(sqrt(n)*exp(-0.5*tval^2))
}
## Generate data (t-values) based on effect size
tval <- NA
for(i in 1:10000){
x <- rnorm(N, delta, sd=1)
tval[i] <- t.test(x)$statistic
}
res <- as.data.frame(cbind(tval))
# Calculate BFs using the BayesFactor package
a <- Sys.time()
res$logBF <- log(apply(res, 1, function(x) unname(ttest.tstat(x, n1 = N, rscale = "medium", simple=T))))
print(Sys.time()-a) # this takes roughly 40-45 seconds
# Calculate approximate BFs using Jeffreys's approximation
a <- Sys.time()
res$logBFapproxJeffreys <- log(BFapproxJef(res$tval, n = N))
print(Sys.time()-a) # this takes roughly 0.01 seconds
# Calculate approximate BFs using a linear approximation
a <- Sys.time()
trange <- range(tval) # Find a good BF value approximation function for the t-value range
tfit <- seq(trange[1], trange[2], length.out = 50)
BFs <- apply(cbind(tfit), 1, function(x) unname(ttest.tstat(x, n1=N, rscale="medium", simple=T)))
fit <- fitfun(tfit, n=N, BFs=BFs)
res$logBFapproxLin <- fit$coefficients[1] + fit$coefficients[2]*tval^2
print(Sys.time() - a) # this takes roughly 0.25 seconds
summary(res$logBF)
summary(res$logBFapproxJeffreys)
summary(res$logBFapproxLin)
head(cond)
# Approximate BF10 is 1/K
BFapproxJW <- function(tval, n, alternative){
# Reconstruct p-value of t-test function for t value input
lowerTail <- ifelse(alternative=="less", T, F)
df <- n-1
pval <- ifelse(alternative=="two.sided",
min(pt(q=tval, df=df, lower.tail=F),
pt(q=tval, df=df, lower.tail=T))*2,
pt(q=tval, df=df, lower.tail=lowerTail))
# Compute Wald statistic
W <- qchisq(pval, df=1, lower.tail=FALSE)
# Jeffreys approximation with Wald statistic
1/(sqrt(n)*exp(-0.5*W))
}
# Compare to Bayes factor (one value)
library(BayesFactor)
ttest.tstat(t = 1.5, n1 = 50, simple=T)
BFapproxJW(tval=1.5, n = 50, alternative="two.sided")
tval <- seq(-5, 5, length.out=1001)
Ns <- c(10, 50, 100, 500)
cond <- expand.grid(tval, Ns)
cond$BFapproxJW <- apply(cond[, 1:2], 1, FUN = function(x) BFapproxJW(t=x[1], n=x[2], alternative = "two.sided"))
cond$BFttest <- apply(cond[, 1:2], 1, FUN = function(x) unname(ttest.tstat(t=x[1], n1=x[2], simple=T)))
colnames(cond)[1:2] <- c("tval", "N")
tval <- seq(-5, 5, length.out=1001)
Ns <- c(10, 50, 100, 500)
cond <- expand.grid(tval, Ns)
cond$BFapproxJW <- apply(cond[, 1:2], 1, FUN = function(x) BFapproxJW(t=x[1], n=x[2], alternative = "two.sided"))
cond$BFttest <- apply(cond[, 1:2], 1, FUN = function(x) unname(ttest.tstat(t=x[1], n1=x[2], simple=T)))
colnames(cond)[1:2] <- c("tval", "N")
library(dplyr)
library(ggplot2)
cond %>%
ggplot(aes(tval, log(BFapprox))) +
geom_line() +
facet_wrap(~ N) +
geom_line(aes(tval, log(BFttest)), color = "steelblue") +
labs(y = "log BF", x = "t-value")
library(dplyr)
library(ggplot2)
cond %>%
ggplot(aes(tval, log(BFapproxJW))) +
geom_line() +
facet_wrap(~ N) +
geom_line(aes(tval, log(BFttest)), color = "steelblue") +
labs(y = "log BF", x = "t-value")
library(dplyr)
library(ggplot2)
cond %>%
ggplot(aes(tval, log(BFapproxJW))) +
geom_line() +
facet_wrap(~ N) +
geom_line(aes(tval, log(BFttest)), color = "seagreen") +
labs(y = "log BF", x = "t-value")
library(dplyr)
library(ggplot2)
cond %>%
ggplot(aes(tval, log(BFapproxJW))) +
geom_line() +
facet_wrap(~ N) +
geom_line(aes(tval, log(BFttest)), color = "seagreen") +
labs(y = "log BF", x = "t-value")
tval <- seq(-5, 5, length.out=1001)
Ns <- c(10, 50, 100, 500)
cond <- expand.grid(tval, Ns)
cond$BFapproxJW <- apply(cond[, 1:2], 1, FUN = function(x) BFapproxJW(t=x[1], n=x[2], alternative = "greater"))
cond$BFttest <- apply(cond[, 1:2], 1, FUN = function(x) unname(ttest.tstat(t=x[1], n1=x[2], simple=T, nullInterval = c(0, Inf))))
colnames(cond)[1:2] <- c("tval", "N")
tval <- seq(-5, 5, length.out=1001)
Ns <- c(10, 50, 100, 500)
cond <- expand.grid(tval, Ns)
cond$BFapproxJW <- apply(cond[, 1:2], 1, FUN = function(x) BFapproxJW(t=x[1], n=x[2], alternative = "greater"))
cond$BFttest <- apply(cond[, 1:2], 1, FUN = function(x) unname(ttest.tstat(t=x[1], n1=x[2], simple=T, nullInterval = c(0, Inf))))
colnames(cond)[1:2] <- c("tval", "N")
library(dplyr)
library(ggplot2)
cond %>%
ggplot(aes(tval, log(BFapproxJW))) +
geom_line() +
facet_wrap(~ N) +
geom_line(aes(tval, log(BFttest)), color = "seagreen") +
labs(y = "log BF", x = "t-value")
tval <- seq(-5, 5, length.out=1001)
Ns <- c(10, 50, 100, 500)
cond <- expand.grid(tval, Ns)
cond$BFapproxJW <- apply(cond[, 1:2], 1, FUN = function(x) BFapproxJW(t=x[1], n=x[2], alternative = "less"))
cond$BFttest <- apply(cond[, 1:2], 1, FUN = function(x) unname(ttest.tstat(t=x[1], n1=x[2], simple=T, nullInterval = c(-Inf, 0))))
colnames(cond)[1:2] <- c("tval", "N")
tval <- seq(-5, 5, length.out=1001)
Ns <- c(10, 50, 100, 500)
cond <- expand.grid(tval, Ns)
cond$BFapproxJW <- apply(cond[, 1:2], 1, FUN = function(x) BFapproxJW(t=x[1], n=x[2], alternative = "less"))
cond$BFttest <- apply(cond[, 1:2], 1, FUN = function(x) unname(ttest.tstat(t=x[1], n1=x[2], simple=T, nullInterval = c(-Inf, 0))))
colnames(cond)[1:2] <- c("tval", "N")
library(dplyr)
library(ggplot2)
cond %>%
ggplot(aes(tval, log(BFapproxJW))) +
geom_line() +
facet_wrap(~ N) +
geom_line(aes(tval, log(BFttest)), color = "seagreen") +
labs(y = "log BF", x = "t-value")
Ns <- c(10, 50, 100, 500)
deltas <- c(0, 0.1, 0.3, 0.5, 0.8)
priorwidth <- c(0.707, 1)
conds <- expand.grid(Ns, deltas)
tvals <- simplify2array(apply(conds, 1, function(x){
tval <- NA
for(i in 1:5000){
samp <- rnorm(x[1], x[2], sd=1)
tval[i] <- t.test(samp)$statistic
}
return(tval)
}))
res <- array(NA, dim=c(5000, (length(Ns)*length(deltas)), 3))
for(i in 1:(length(Ns)*length(deltas))){
res[, i, 1] <- log(apply(cbind(tvals[,i]), 1, function(x) unname(ttest.tstat(x, n1 = conds[i,1], rscale = "medium", simple=T))))
res[, i, 2] <- log(apply(cbind(tvals[,i]), 1, function(x) unname(ttest.tstat(x, n1 = conds[i,1], rscale = "wide", simple=T))))
res[, i, 3] <- log(BFapproxJW(tvals[,i], n = conds[i,1], alternative="two.sided"))
}
bxpdat <- list()
par(mfrow=c(1,4), mar=c(5, 3, 4, 1))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=5*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:5, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], main=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]), col=c("seagreen", "seagreen1", "gray", "seagreen", "seagreen2"))
}
head(res)
(length(Ns)*length(deltas)
)
bxpdat <- list()
par(mfrow=c(1,4), mar=c(5, 3, 4, 1))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=3*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:3, each=5000)
for(j in 1:5){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], main=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]), col=c("seagreen", "seagreen1", "black"))
}
bxpdat <- list()
par(mfrow=c(1,4), mar=c(5, 3, 4, 1))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=3*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:3, each=5000)
for(j in 1:3){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], main=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]), col=c("seagreen", "seagreen1", "black"))
}
res[,,1]
res[,,3]
tvals[,1]
head(tvals[,1])
head(conds)
for(i in 1:(length(Ns)*length(deltas))){
# res[, i, 1] <- log(apply(cbind(tvals[,i]), 1, function(x) unname(ttest.tstat(x, n1 = conds[i,1], rscale = "medium", simple=T))))
# res[, i, 2] <- log(apply(cbind(tvals[,i]), 1, function(x) unname(ttest.tstat(x, n1 = conds[i,1], rscale = "wide", simple=T))))
res[, i, 3] <- log(apply(cbind(tvals[,i]), 1, function(x) BFapproxJW(tvals[,i], n = conds[i,1], alternative="two.sided")))
}
for(i in 1:(length(Ns)*length(deltas))){
# res[, i, 1] <- log(apply(cbind(tvals[,i]), 1, function(x) unname(ttest.tstat(x, n1 = conds[i,1], rscale = "medium", simple=T))))
# res[, i, 2] <- log(apply(cbind(tvals[,i]), 1, function(x) unname(ttest.tstat(x, n1 = conds[i,1], rscale = "wide", simple=T))))
res[, i, 3] <- log(apply(cbind(tvals[,i]), 1, function(x) BFapproxJW(x, n = conds[i,1], alternative="two.sided")))
}
bxpdat <- list()
par(mfrow=c(1,4), mar=c(5, 3, 4, 1))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=3*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:3, each=5000)
for(j in 1:3){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], main=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]), col=c("seagreen", "seagreen1", "black"))
}
res[,,3]
res[,,2]
bxpdat <- list()
par(mfrow=c(1,4), mar=c(5, 3, 4, 1))
for(i in 1:(length(Ns)*length(deltas))){
bxpdat[[i]] <- as.data.frame(matrix(NA, nrow=3*5000, ncol=2, dimnames = list(NULL, c("method", "BF"))))
bxpdat[[i]]$method <- rep(1:3, each=5000)
for(j in 1:3){
bxpdat[[i]]$BF[ bxpdat[[i]]$method==j] <- res[, i, j]
}
boxplot(BF ~ method, bxpdat[[i]], main=paste0("N = ", conds[i, 1], ", ES = ", conds[i, 2]), col=c("seagreen", "seagreen1", "grey"))
}
